/**
 * ü§ñ useAutoWorkouts Hook
 * Hook para manejar rutinas autom√°ticas basadas en asignaciones de splits
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/api';

interface AutoWorkout {
  id: number;
  splitName: string;
  exercises: any[];
  estimatedDuration: number;
  targetMuscleGroups: string[];
  aiConfidenceScore: number;
  generationMetadata: any;
  isAutoGenerated: boolean;
}

interface CacheStatus {
  userId: number;
  totalCached: number;
  nextWeekCached: number;
  oldestCached: string;
  newestCached: string;
  needsGeneration: string[];
}

export function useAutoWorkouts() {
  const queryClient = useQueryClient();

  /**
   * üéØ Obtener rutina autom√°tica para una fecha espec√≠fica
   */
  const useAutoWorkout = (date?: string) => {
    return useQuery({
      queryKey: ['/api/scientific-workouts/auto-workout', date],
      queryFn: async () => {
        console.log('ü§ñ [useAutoWorkouts] Fetching auto workout for date:', date);
        
        const params = date ? `?date=${date}` : '';
        const response = await apiRequest('GET', `/api/scientific-workouts/auto-workout${params}`);
        const data = await response.json();
        
        console.log('ü§ñ [useAutoWorkouts] Auto workout response:', data);
        return data;
      },
      staleTime: 5 * 60 * 1000, // 5 minutos
      cacheTime: 10 * 60 * 1000, // 10 minutos
    });
  };

  /**
   * üéØ Obtener rutina autom√°tica para hoy
   */
  const useTodayAutoWorkout = () => {
    const today = new Date().toISOString().split('T')[0];
    return useAutoWorkout(today);
  };

  /**
   * üìä Obtener estado del cache
   */
  const useCacheStatus = () => {
    return useQuery({
      queryKey: ['/api/scientific-workouts/cache-status'],
      queryFn: async () => {
        console.log('üìä [useAutoWorkouts] Fetching cache status...');
        
        const response = await apiRequest('GET', '/api/scientific-workouts/cache-status');
        const data = await response.json();
        
        console.log('üìä [useAutoWorkouts] Cache status:', data);
        return data;
      },
      staleTime: 2 * 60 * 1000, // 2 minutos
      cacheTime: 5 * 60 * 1000, // 5 minutos
    });
  };

  /**
   * üîÑ Regenerar cache de rutinas
   */
  const useRegenerateCache = () => {
    return useMutation({
      mutationFn: async (daysAhead: number = 7) => {
        console.log('üîÑ [useAutoWorkouts] Regenerating cache for', daysAhead, 'days ahead...');
        
        const response = await apiRequest('POST', '/api/scientific-workouts/regenerate-cache', {
          daysAhead
        });
        
        const data = await response.json();
        console.log('üîÑ [useAutoWorkouts] Cache regenerated:', data);
        return data;
      },
      onSuccess: () => {
        // Invalidar queries relacionadas
        queryClient.invalidateQueries({ queryKey: ['/api/scientific-workouts/cache-status'] });
        queryClient.invalidateQueries({ queryKey: ['/api/scientific-workouts/auto-workout'] });
        console.log('‚úÖ [useAutoWorkouts] Cache queries invalidated');
      },
      onError: (error) => {
        console.error('‚ùå [useAutoWorkouts] Error regenerating cache:', error);
      }
    });
  };

  /**
   * üóìÔ∏è Obtener rutinas para m√∫ltiples fechas
   */
  const useWeeklyAutoWorkouts = (startDate: string, days: number = 7) => {
    return useQuery({
      queryKey: ['/api/scientific-workouts/weekly-auto-workouts', startDate, days],
      queryFn: async () => {
        console.log('üóìÔ∏è [useAutoWorkouts] Fetching weekly workouts from:', startDate, 'for', days, 'days');
        
        const workouts: { [date: string]: AutoWorkout | null } = {};
        const promises = [];
        
        for (let i = 0; i < days; i++) {
          const date = new Date(startDate);
          date.setDate(date.getDate() + i);
          const dateStr = date.toISOString().split('T')[0];
          
          promises.push(
            apiRequest('GET', `/api/scientific-workouts/auto-workout?date=${dateStr}`)
              .then(response => response.json())
              .then(data => ({ date: dateStr, workout: data.workout }))
              .catch(error => {
                console.error(`‚ùå [useAutoWorkouts] Error fetching workout for ${dateStr}:`, error);
                return { date: dateStr, workout: null };
              })
          );
        }
        
        const results = await Promise.all(promises);
        results.forEach(({ date, workout }) => {
          workouts[date] = workout;
        });
        
        console.log('üóìÔ∏è [useAutoWorkouts] Weekly workouts fetched:', workouts);
        return workouts;
      },
      staleTime: 5 * 60 * 1000, // 5 minutos
      cacheTime: 10 * 60 * 1000, // 10 minutos
    });
  };

  /**
   * üéØ Marcar rutina como completada
   */
  const useCompleteWorkout = () => {
    return useMutation({
      mutationFn: async ({ workoutId, date }: { workoutId: number; date: string }) => {
        console.log('‚úÖ [useAutoWorkouts] Marking workout as completed:', workoutId, date);
        
        // Aqu√≠ se podr√≠a llamar a un endpoint espec√≠fico para marcar como completada
        // Por ahora, simplemente invalidamos las queries
        return { workoutId, date };
      },
      onSuccess: (data) => {
        // Invalidar queries relacionadas
        queryClient.invalidateQueries({ queryKey: ['/api/scientific-workouts/auto-workout', data.date] });
        queryClient.invalidateQueries({ queryKey: ['/api/scientific-workouts/cache-status'] });
        console.log('‚úÖ [useAutoWorkouts] Workout completion queries invalidated');
      },
      onError: (error) => {
        console.error('‚ùå [useAutoWorkouts] Error completing workout:', error);
      }
    });
  };

  /**
   * üîÑ Refrescar rutinas autom√°ticas
   */
  const refreshAutoWorkouts = () => {
    console.log('üîÑ [useAutoWorkouts] Refreshing auto workouts...');
    queryClient.invalidateQueries({ queryKey: ['/api/scientific-workouts/auto-workout'] });
    queryClient.invalidateQueries({ queryKey: ['/api/scientific-workouts/cache-status'] });
  };

  /**
   * üéØ Verificar si hay rutina para hoy
   */
  const useHasTodayWorkout = () => {
    const { data: todayWorkout, isLoading } = useTodayAutoWorkout();
    
    return {
      hasWorkout: !isLoading && todayWorkout?.success && todayWorkout?.workout && !todayWorkout?.isRestDay,
      isRestDay: !isLoading && todayWorkout?.isRestDay,
      workout: todayWorkout?.workout,
      isLoading
    };
  };

  /**
   * üìä Obtener estad√≠sticas de rutinas autom√°ticas
   */
  const useAutoWorkoutStats = () => {
    const { data: cacheStatus } = useCacheStatus();
    
    return {
      totalCached: cacheStatus?.cacheStatus?.totalCached || 0,
      nextWeekCached: cacheStatus?.cacheStatus?.nextWeekCached || 0,
      needsGeneration: cacheStatus?.cacheStatus?.needsGeneration || [],
      isHealthy: (cacheStatus?.cacheStatus?.nextWeekCached || 0) >= 3 // Al menos 3 d√≠as en cache
    };
  };

  return {
    // Queries
    useAutoWorkout,
    useTodayAutoWorkout,
    useCacheStatus,
    useWeeklyAutoWorkouts,
    useHasTodayWorkout,
    useAutoWorkoutStats,
    
    // Mutations
    useRegenerateCache,
    useCompleteWorkout,
    
    // Utils
    refreshAutoWorkouts
  };
}

export default useAutoWorkouts;
