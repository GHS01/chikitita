/**
 * ü§ñ Auto Workout Service
 * Sistema de generaci√≥n autom√°tica de rutinas basado en asignaciones de splits
 */

import { supabase } from '../supabase';
import { supabaseStorage } from '../supabaseStorage';
import { splitAssignmentService } from './splitAssignmentService';
import { geminiService } from '../geminiService';
import { getCurrentDate } from '../utils/timeSystem';

interface AutoWorkoutConfig {
  userId: number;
  targetDate: string;
  dayName: string;
  splitAssignment?: any;
  userPreferences?: any;
  userProfile?: any;
}

interface PreGeneratedWorkout {
  id?: number;
  user_id: number;
  workout_date: string;
  day_name: string;
  split_id: number;
  split_name: string;
  exercises: any[];
  estimated_duration: number;
  target_muscle_groups: string[];
  ai_confidence_score: number;
  generation_metadata: any;
  is_consumed: boolean;
  created_at?: string;
}

export class AutoWorkoutService {

  /**
   * üéØ Generar rutina autom√°ticamente para un d√≠a espec√≠fico
   */
  async generateWorkoutForDay(config: AutoWorkoutConfig): Promise<PreGeneratedWorkout | null> {
    try {
      console.log('ü§ñ [AutoWorkout] Generating workout for day:', config.dayName, 'date:', config.targetDate);

      // 1. Obtener asignaci√≥n de split para este d√≠a
      const splitAssignment = config.splitAssignment || 
        await splitAssignmentService.getSplitForDay(config.userId, config.dayName);

      if (!splitAssignment) {
        console.log('ü§ñ [AutoWorkout] No split assigned for day:', config.dayName);
        return null;
      }

      console.log('ü§ñ [AutoWorkout] Split found:', splitAssignment.split_name);

      // 2. Obtener datos del usuario
      const [userProfile, userPreferences] = await Promise.all([
        config.userProfile || supabaseStorage.getUser(config.userId),
        config.userPreferences || supabaseStorage.getUserPreferences(config.userId)
      ]);

      if (!userProfile) {
        throw new Error(`User profile not found for user ${config.userId}`);
      }

      // 3. Preparar datos para la IA
      const feedbackData = {
        energyLevel: 'medium', // Valor por defecto, se puede personalizar
        availableTime: '45', // Valor por defecto basado en preferencias
        todayMusclePreference: splitAssignment.muscle_groups,
        scientificRationale: splitAssignment.scientific_rationale,
        autoGenerated: true
      };

      // 4. Generar rutina con IA
      console.log('ü§ñ [AutoWorkout] Calling AI to generate workout...');
      const workoutPlan = await geminiService.generateDailyWorkoutPlan({
        userProfile,
        userPreferences,
        feedbackData,
        learningData: null,
        currentDate: config.targetDate,
        dayOfWeek: config.dayName,
        consolidatedProfile: null
      });

      // 5. Crear objeto de rutina pre-generada
      const preGeneratedWorkout: any = {
        user_id: config.userId,
        workout_date: config.targetDate,
        day_name: config.dayName,
        split_id: splitAssignment.id,
        split_type: splitAssignment.split_type, // Ya viene de scientific_splits
        split_name: splitAssignment.split_name,
        exercises: workoutPlan.exercises || [],
        estimated_duration: workoutPlan.duration || 45,
        target_muscle_groups: splitAssignment.muscle_groups || [],
        ai_confidence_score: workoutPlan.aiConfidence || 0.8,
        generation_metadata: {
          generatedAt: new Date().toISOString(),
          splitUsed: splitAssignment.split_name,
          autoGenerated: true,
          scientificRationale: splitAssignment.scientific_rationale,
          userEnergyLevel: feedbackData.energyLevel,
          availableTime: feedbackData.availableTime
        },
        is_consumed: false
      };

      console.log('üîç [AutoWorkout] Generated workout data:', {
        split_type: preGeneratedWorkout.split_type,
        split_name: preGeneratedWorkout.split_name,
        split_id: preGeneratedWorkout.split_id
      });

      console.log('‚úÖ [AutoWorkout] Workout generated successfully for:', config.dayName);
      return preGeneratedWorkout;

    } catch (error) {
      console.error('‚ùå [AutoWorkout] Error generating workout for day:', error);
      throw error;
    }
  }

  /**
   * üóìÔ∏è Generar rutinas para toda la semana
   */
  async generateWeeklyWorkouts(userId: number, startDate: string): Promise<PreGeneratedWorkout[]> {
    try {
      console.log('üóìÔ∏è [AutoWorkout] Generating weekly workouts for user:', userId, 'starting:', startDate);

      // 1. Obtener asignaciones del usuario
      const { assignments } = await splitAssignmentService.getUserSplitAssignments(userId);

      if (assignments.length === 0) {
        console.log('üóìÔ∏è [AutoWorkout] No split assignments found for user:', userId);
        return [];
      }

      // 2. Obtener datos del usuario una vez
      const [userProfile, userPreferences] = await Promise.all([
        supabaseStorage.getUser(userId),
        supabaseStorage.getUserPreferences(userId)
      ]);

      // 3. Generar rutinas para cada d√≠a asignado
      const generatedWorkouts: PreGeneratedWorkout[] = [];
      const startDateObj = new Date(startDate);

      for (const assignment of assignments) {
        // Calcular fecha espec√≠fica para este d√≠a
        const dayIndex = this.getDayIndex(assignment.day_name);
        const targetDate = new Date(startDateObj);
        targetDate.setDate(startDateObj.getDate() + dayIndex);
        const targetDateStr = targetDate.toISOString().split('T')[0];

        // Generar rutina para este d√≠a
        const workout = await this.generateWorkoutForDay({
          userId,
          targetDate: targetDateStr,
          dayName: assignment.day_name,
          splitAssignment: assignment.scientific_splits,
          userPreferences,
          userProfile
        });

        if (workout) {
          generatedWorkouts.push(workout);
        }
      }

      console.log('‚úÖ [AutoWorkout] Generated', generatedWorkouts.length, 'workouts for the week');
      return generatedWorkouts;

    } catch (error) {
      console.error('‚ùå [AutoWorkout] Error generating weekly workouts:', error);
      throw error;
    }
  }

  /**
   * üíæ Guardar rutinas pre-generadas en cache
   */
  async savePreGeneratedWorkouts(workouts: PreGeneratedWorkout[]): Promise<void> {
    try {
      console.log('üíæ [AutoWorkout] Saving', workouts.length, 'pre-generated workouts to cache...');

      if (workouts.length === 0) {
        console.log('üíæ [AutoWorkout] No workouts to save');
        return;
      }

      const { data, error } = await supabase
        .from('pre_generated_workouts')
        .insert(workouts);

      if (error) {
        console.error('‚ùå [AutoWorkout] Error saving pre-generated workouts:', error);
        throw new Error(`Failed to save pre-generated workouts: ${error.message}`);
      }

      console.log('‚úÖ [AutoWorkout] Pre-generated workouts saved successfully');

    } catch (error) {
      console.error('‚ùå [AutoWorkout] Error in savePreGeneratedWorkouts:', error);
      throw error;
    }
  }

  /**
   * üîç Obtener rutina pre-generada para una fecha espec√≠fica
   */
  async getPreGeneratedWorkout(userId: number, workoutDate: string): Promise<PreGeneratedWorkout | null> {
    try {
      console.log('üîç [AutoWorkout] Getting pre-generated workout for:', workoutDate);

      const { data: workout, error } = await supabase
        .from('pre_generated_workouts')
        .select('*')
        .eq('user_id', userId)
        .eq('workout_date', workoutDate)
        .eq('is_consumed', false)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
        console.error('‚ùå [AutoWorkout] Error getting pre-generated workout:', error);
        throw new Error(`Failed to get pre-generated workout: ${error.message}`);
      }

      if (!workout) {
        console.log('üîç [AutoWorkout] No pre-generated workout found for date:', workoutDate);
        return null;
      }

      console.log('‚úÖ [AutoWorkout] Pre-generated workout found:', workout.split_name);
      return workout;

    } catch (error) {
      console.error('‚ùå [AutoWorkout] Error in getPreGeneratedWorkout:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ Marcar rutina pre-generada como usada
   */
  async markWorkoutAsUsed(workoutId: number): Promise<void> {
    try {
      console.log('‚úÖ [AutoWorkout] Marking workout as used:', workoutId);

      const { error } = await supabase
        .from('pre_generated_workouts')
        .update({ is_consumed: true })
        .eq('id', workoutId);

      if (error) {
        console.error('‚ùå [AutoWorkout] Error marking workout as used:', error);
        throw new Error(`Failed to mark workout as used: ${error.message}`);
      }

      console.log('‚úÖ [AutoWorkout] Workout marked as used successfully');

    } catch (error) {
      console.error('‚ùå [AutoWorkout] Error in markWorkoutAsUsed:', error);
      throw error;
    }
  }

  /**
   * üßπ Limpiar rutinas pre-generadas antiguas
   */
  async cleanupOldWorkouts(daysOld: number = 7): Promise<void> {
    try {
      console.log('üßπ [AutoWorkout] Cleaning up workouts older than', daysOld, 'days...');

      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysOld);
      const cutoffDateStr = cutoffDate.toISOString().split('T')[0];

      const { error } = await supabase
        .from('pre_generated_workouts')
        .delete()
        .lt('workout_date', cutoffDateStr);

      if (error) {
        console.error('‚ùå [AutoWorkout] Error cleaning up old workouts:', error);
        throw new Error(`Failed to cleanup old workouts: ${error.message}`);
      }

      console.log('‚úÖ [AutoWorkout] Old workouts cleaned up successfully');

    } catch (error) {
      console.error('‚ùå [AutoWorkout] Error in cleanupOldWorkouts:', error);
      throw error;
    }
  }

  /**
   * üóìÔ∏è Obtener √≠ndice del d√≠a (0=domingo, 1=lunes, etc.)
   */
  private getDayIndex(dayName: string): number {
    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    return days.indexOf(dayName.toLowerCase());
  }
}

export const autoWorkoutService = new AutoWorkoutService();
